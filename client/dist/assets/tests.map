{"version":3,"sources":["fan-score-app/tests/adapters/application.jshint.js","fan-score-app/tests/app.jshint.js","fan-score-app/tests/components/bar-graph.jshint.js","fan-score-app/tests/controllers/application.jshint.js","fan-score-app/tests/controllers/fan.jshint.js","fan-score-app/tests/controllers/team.jshint.js","fan-score-app/tests/controllers/teams.jshint.js","fan-score-app/tests/helpers/destroy-app.js","fan-score-app/tests/helpers/destroy-app.jshint.js","fan-score-app/tests/helpers/format-dasherize.jshint.js","fan-score-app/tests/helpers/module-for-acceptance.js","fan-score-app/tests/helpers/module-for-acceptance.jshint.js","fan-score-app/tests/helpers/resolver.js","fan-score-app/tests/helpers/resolver.jshint.js","fan-score-app/tests/helpers/start-app.js","fan-score-app/tests/helpers/start-app.jshint.js","fan-score-app/tests/integration/components/bar-graph-test.js","fan-score-app/tests/integration/components/bar-graph-test.jshint.js","fan-score-app/tests/models/fan.jshint.js","fan-score-app/tests/models/fanscore.jshint.js","fan-score-app/tests/models/field.jshint.js","fan-score-app/tests/models/game.jshint.js","fan-score-app/tests/models/team.jshint.js","fan-score-app/tests/router.jshint.js","fan-score-app/tests/routes/application.jshint.js","fan-score-app/tests/routes/fan.jshint.js","fan-score-app/tests/routes/fanscore.jshint.js","fan-score-app/tests/routes/index.jshint.js","fan-score-app/tests/routes/team.jshint.js","fan-score-app/tests/routes/teams.jshint.js","fan-score-app/tests/serializers/application.jshint.js","fan-score-app/tests/serializers/fan.jshint.js","fan-score-app/tests/serializers/game.jshint.js","fan-score-app/tests/test-helper.js","fan-score-app/tests/test-helper.jshint.js","fan-score-app/tests/unit/adapters/application-test.js","fan-score-app/tests/unit/adapters/application-test.jshint.js","fan-score-app/tests/unit/adapters/test-test.js","fan-score-app/tests/unit/adapters/test-test.jshint.js","fan-score-app/tests/unit/controllers/application-test.js","fan-score-app/tests/unit/controllers/application-test.jshint.js","fan-score-app/tests/unit/controllers/fan-test.js","fan-score-app/tests/unit/controllers/fan-test.jshint.js","fan-score-app/tests/unit/controllers/team-test.js","fan-score-app/tests/unit/controllers/team-test.jshint.js","fan-score-app/tests/unit/controllers/teams-test.js","fan-score-app/tests/unit/controllers/teams-test.jshint.js","fan-score-app/tests/unit/helpers/format-dasherize-test.js","fan-score-app/tests/unit/helpers/format-dasherize-test.jshint.js","fan-score-app/tests/unit/models/fan-test.js","fan-score-app/tests/unit/models/fan-test.jshint.js","fan-score-app/tests/unit/models/fanscore-test.js","fan-score-app/tests/unit/models/fanscore-test.jshint.js","fan-score-app/tests/unit/models/field-test.js","fan-score-app/tests/unit/models/field-test.jshint.js","fan-score-app/tests/unit/models/game-test.js","fan-score-app/tests/unit/models/game-test.jshint.js","fan-score-app/tests/unit/models/team-test.js","fan-score-app/tests/unit/models/team-test.jshint.js","fan-score-app/tests/unit/routes/application-test.js","fan-score-app/tests/unit/routes/application-test.jshint.js","fan-score-app/tests/unit/routes/fan-test.js","fan-score-app/tests/unit/routes/fan-test.jshint.js","fan-score-app/tests/unit/routes/fanscore-test.js","fan-score-app/tests/unit/routes/fanscore-test.jshint.js","fan-score-app/tests/unit/routes/index-test.js","fan-score-app/tests/unit/routes/index-test.jshint.js","fan-score-app/tests/unit/routes/team-test.js","fan-score-app/tests/unit/routes/team-test.jshint.js","fan-score-app/tests/unit/routes/teams-test.js","fan-score-app/tests/unit/routes/teams-test.jshint.js","fan-score-app/tests/unit/serializers/application-test.js","fan-score-app/tests/unit/serializers/application-test.jshint.js","fan-score-app/tests/unit/serializers/fan-test.js","fan-score-app/tests/unit/serializers/fan-test.jshint.js","fan-score-app/tests/unit/serializers/game-test.js","fan-score-app/tests/unit/serializers/game-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('fan-score-app/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/application.js should pass jshint', function (assert) {\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/components/bar-graph.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/bar-graph.js should pass jshint', function (assert) {\n    assert.ok(true, 'components/bar-graph.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/application.js should pass jshint', function (assert) {\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/controllers/fan.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/fan.js should pass jshint', function (assert) {\n    assert.ok(true, 'controllers/fan.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/controllers/team.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/team.js should pass jshint', function (assert) {\n    assert.ok(true, 'controllers/team.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/controllers/teams.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/teams.js should pass jshint', function (assert) {\n    assert.ok(true, 'controllers/teams.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('fan-score-app/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/helpers/format-dasherize.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/format-dasherize.js should pass jshint', function (assert) {\n    assert.ok(true, 'helpers/format-dasherize.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'fan-score-app/tests/helpers/start-app', 'fan-score-app/tests/helpers/destroy-app'], function (exports, _qunit, _fanScoreAppTestsHelpersStartApp, _fanScoreAppTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _fanScoreAppTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _fanScoreAppTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('fan-score-app/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/helpers/resolver', ['exports', 'ember/resolver', 'fan-score-app/config/environment'], function (exports, _emberResolver, _fanScoreAppConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _fanScoreAppConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _fanScoreAppConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('fan-score-app/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/helpers/start-app', ['exports', 'ember', 'fan-score-app/app', 'fan-score-app/config/environment'], function (exports, _ember, _fanScoreAppApp, _fanScoreAppConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _fanScoreAppConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _fanScoreAppApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('fan-score-app/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/integration/components/bar-graph-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('bar-graph', 'Integration | Component | bar graph', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'bar-graph', ['loc', [null, [1, 0], [1, 13]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.2.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'bar-graph', [], [], 0, null, ['loc', [null, [2, 4], [4, 18]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('fan-score-app/tests/integration/components/bar-graph-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/bar-graph-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'integration/components/bar-graph-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/models/fan.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/fan.js should pass jshint', function (assert) {\n    assert.ok(true, 'models/fan.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/models/fanscore.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/fanscore.js should pass jshint', function (assert) {\n    assert.ok(true, 'models/fanscore.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/models/field.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/field.js should pass jshint', function (assert) {\n    assert.ok(true, 'models/field.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/models/game.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/game.js should pass jshint', function (assert) {\n    assert.ok(true, 'models/game.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/models/team.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/team.js should pass jshint', function (assert) {\n    assert.ok(true, 'models/team.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/application.js should pass jshint', function (assert) {\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/routes/fan.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/fan.js should pass jshint', function (assert) {\n    assert.ok(true, 'routes/fan.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/routes/fanscore.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/fanscore.js should pass jshint', function (assert) {\n    assert.ok(true, 'routes/fanscore.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/index.js should pass jshint', function (assert) {\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/routes/team.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/team.js should pass jshint', function (assert) {\n    assert.ok(true, 'routes/team.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/routes/teams.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/teams.js should pass jshint', function (assert) {\n    assert.ok(true, 'routes/teams.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/application.js should pass jshint', function (assert) {\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/serializers/fan.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/fan.js should pass jshint', function (assert) {\n    assert.ok(true, 'serializers/fan.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/serializers/game.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/game.js should pass jshint', function (assert) {\n    assert.ok(true, 'serializers/game.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/test-helper', ['exports', 'fan-score-app/tests/helpers/resolver', 'ember-qunit'], function (exports, _fanScoreAppTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_fanScoreAppTestsHelpersResolver['default']);\n});","define('fan-score-app/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('fan-score-app/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/application-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/adapters/test-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:test', 'Unit | Adapter | test', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('fan-score-app/tests/unit/adapters/test-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/test-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/adapters/test-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('fan-score-app/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/application-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/controllers/fan-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:fan', 'Unit | Controller | fan', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('fan-score-app/tests/unit/controllers/fan-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/fan-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/controllers/fan-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/controllers/team-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:team', 'Unit | Controller | team', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('fan-score-app/tests/unit/controllers/team-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/team-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/controllers/team-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/controllers/teams-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:teams', 'Unit | Controller | teams', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('fan-score-app/tests/unit/controllers/teams-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/teams-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/controllers/teams-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/helpers/format-dasherize-test', ['exports', 'fan-score-app/helpers/format-dasherize', 'qunit'], function (exports, _fanScoreAppHelpersFormatDasherize, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | format dasherize');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _fanScoreAppHelpersFormatDasherize.formatDasherize)(42);\n    assert.ok(result);\n  });\n});","define('fan-score-app/tests/unit/helpers/format-dasherize-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers');\n  QUnit.test('unit/helpers/format-dasherize-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/helpers/format-dasherize-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/models/fan-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('fan', 'Unit | Model | fan', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fan-score-app/tests/unit/models/fan-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/fan-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/models/fan-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/models/fanscore-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('fanscore', 'Unit | Model | fanscore', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fan-score-app/tests/unit/models/fanscore-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/fanscore-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/models/fanscore-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/models/field-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('field', 'Unit | Model | field', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fan-score-app/tests/unit/models/field-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/field-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/models/field-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/models/game-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('game', 'Unit | Model | game', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fan-score-app/tests/unit/models/game-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/game-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/models/game-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/models/team-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('team', 'Unit | Model | team', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('fan-score-app/tests/unit/models/team-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/team-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/models/team-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fan-score-app/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/application-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/routes/fan-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:fan', 'Unit | Route | fan', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fan-score-app/tests/unit/routes/fan-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/fan-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/routes/fan-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/routes/fanscore-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:fanscore', 'Unit | Route | fanscore', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fan-score-app/tests/unit/routes/fanscore-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/fanscore-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/routes/fanscore-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fan-score-app/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/index-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/routes/team-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:team', 'Unit | Route | team', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fan-score-app/tests/unit/routes/team-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/team-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/routes/team-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/routes/teams-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:teams', 'Unit | Route | teams', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('fan-score-app/tests/unit/routes/teams-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/teams-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/routes/teams-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('fan-score-app/tests/unit/serializers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers');\n  QUnit.test('unit/serializers/application-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/serializers/fan-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('fan', 'Unit | Serializer | fan', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:fan']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('fan-score-app/tests/unit/serializers/fan-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers');\n  QUnit.test('unit/serializers/fan-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/serializers/fan-test.js should pass jshint.');\n  });\n});","define('fan-score-app/tests/unit/serializers/game-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('game', 'Unit | Serializer | game', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:game']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('fan-score-app/tests/unit/serializers/game-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers');\n  QUnit.test('unit/serializers/game-test.js should pass jshint', function (assert) {\n    assert.ok(true, 'unit/serializers/game-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('fan-score-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}